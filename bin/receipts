#!/usr/bin/env python3
from PIL import Image
from datetime import date
import platform
import pytesseract
import requests
import os
import subprocess
import sys
import argparse

RECEIPT_DIR = '../.receipts'
WALMART_KEY = ""
stores = ['Walmart']
destination = ""
receipt = ""

if platform.system() == "Linux" or platform.system() == "linux":
    pytesseract.pytesseract.tesseract_cmd = "usr/bin/tesseract"
else:
    # For OSX installed with HOMEBREW BABAY
    pytesseract.pytesseract.tesseract_cmd = "/usr/local/bin/tesseract"


def parse_args() -> argparse.Namespace:

    parser = argparse.ArgumentParser(
        description=('Read your receipts SUPA FAST')
    )
    parser.add_argument(
        '--receipt', '-r',
        action='store',
        help='Receipt location',
    )
    parser.add_argument(
        '--save', '-s',
        action='store_true',
        help='Save the output',
    )
    return parser.parse_args()


def fetch(args: argparse.Namespace):
    print("\nSnatching them foods, boii")
    raw_data = pytesseract.image_to_string(
            Image.open(args.receipt),
            lang="eng")

    print("\nFoods snatched, getting UPC codes...\n")
    extract_upc(raw_data)
    print('\ndone!')


def extract_upc(data):
    global stores

    upcs = list()
    for codes in data.split():
        if codes.isDigit() and len(codes) > 9:
            upcs.append(codes)
        for store in stores:
            if store in data:
                product_lookup(None, upcs, store)
            else:
                print("Store not recognized")


def product_lookup(item_id, upcs, store):
    global stores
    global WALMART_KEY
    args = parse_args()
    data = None

    print("CROSS REFERENCING TO THE DATABASE WOOO")
    if item_id:
        print("Grabbing items by ID")
        for ids in item_id:
            if store == stores[0]:
                data = requests.get("http://api.walmartlabs.com/v1/items/" +
                                    ids +
                                    "?apiKey=" +
                                    WALMART_KEY +
                                    "&format=json")
                if (data['code'] == 4023 or data['code'] == '4023'):
                    print("OH NO that item doesn't exist!")
    if upcs:
        print("Grabbing items by UPC")
        for upc in upcs:
            if store == stores[0]:
                data = requests.get("http://api.walmartlabs.com/v1/items?apiKey="+
                                    WALMART_KEY +
                                    "&upc=" +
                                    upc)
                if (data['code'] == 4023 or data['code'] == '4023'):
                    print("OH NO that item doesn't exist!")

    if args.save:
        save(data)


def save(data):
    global RECEIPT_DIR

    day = date.today()
    day_items = RECEIPT_DIR / 'food_{}.txt'.format(day)

    if day_items.exists():
        print("File found, writing data...")
        file = open(day_items, "w")
        file.write(data)
        file.close()
        print("done")
    else:
        print("Error, file not found. Creating...")
        if subprocess.run(['touch', day_items]):
            print("File created, writing data...")
            file = open(day_items, "w")
            file.write(data)
            file.close()
            print("done")
        else:
            print("Error creating file, exiting")
            sys.exit(1)


def check_file():
    global RECEIPT_DIR
    if not os.path.exists(RECEIPT_DIR):
        print(".receipts folder not found, making directory")
        os.mkdirs(RECEIPT_DIR)


def main():
    args = parse_args()

    check_file()

    if args.receipt:
        fetch()
    else:
        print("Error, please run with -r to use")


if __name__ == '__main__':
    sys.exit(0 if main() else 1)
